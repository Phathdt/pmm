/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace ITypes {
  export type RFQInfoStruct = {
    minAmountOut: BigNumberish;
    tradeTimeout: BigNumberish;
    rfqInfoSignature: BytesLike;
  };

  export type RFQInfoStructOutput = [
    minAmountOut: bigint,
    tradeTimeout: bigint,
    rfqInfoSignature: string
  ] & { minAmountOut: bigint; tradeTimeout: bigint; rfqInfoSignature: string };

  export type SelectedPMMInfoStruct = {
    amountOut: BigNumberish;
    selectedPMMId: BytesLike;
    info: [BytesLike, BytesLike];
    sigExpiry: BigNumberish;
  };

  export type SelectedPMMInfoStructOutput = [
    amountOut: bigint,
    selectedPMMId: string,
    info: [string, string],
    sigExpiry: bigint
  ] & {
    amountOut: bigint;
    selectedPMMId: string;
    info: [string, string];
    sigExpiry: bigint;
  };

  export type PMMSelectionStruct = {
    rfqInfo: ITypes.RFQInfoStruct;
    pmmInfo: ITypes.SelectedPMMInfoStruct;
  };

  export type PMMSelectionStructOutput = [
    rfqInfo: ITypes.RFQInfoStructOutput,
    pmmInfo: ITypes.SelectedPMMInfoStructOutput
  ] & {
    rfqInfo: ITypes.RFQInfoStructOutput;
    pmmInfo: ITypes.SelectedPMMInfoStructOutput;
  };

  export type PresignStruct = {
    pmmId: BytesLike;
    pmmRecvAddress: BytesLike;
    presigns: BytesLike[];
  };

  export type PresignStructOutput = [
    pmmId: string,
    pmmRecvAddress: string,
    presigns: string[]
  ] & { pmmId: string; pmmRecvAddress: string; presigns: string[] };

  export type ProtocolFeeStruct = {
    feeRate: BigNumberish;
    amount: BigNumberish;
  };

  export type ProtocolFeeStructOutput = [feeRate: bigint, amount: bigint] & {
    feeRate: bigint;
    amount: bigint;
  };

  export type SettledPaymentStruct = {
    paymentTxId: BytesLike;
    releaseTxId: BytesLike;
    isConfirmed: boolean;
  };

  export type SettledPaymentStructOutput = [
    paymentTxId: string,
    releaseTxId: string,
    isConfirmed: boolean
  ] & { paymentTxId: string; releaseTxId: string; isConfirmed: boolean };

  export type TradeInfoStruct = {
    amountIn: BigNumberish;
    fromChain: [BytesLike, BytesLike, BytesLike];
    toChain: [BytesLike, BytesLike, BytesLike];
  };

  export type TradeInfoStructOutput = [
    amountIn: bigint,
    fromChain: [string, string, string],
    toChain: [string, string, string]
  ] & {
    amountIn: bigint;
    fromChain: [string, string, string];
    toChain: [string, string, string];
  };

  export type ScriptInfoStruct = {
    depositInfo: [BytesLike, BytesLike, BytesLike, BytesLike, BytesLike];
    userEphemeralL2Address: AddressLike;
    scriptTimeout: BigNumberish;
  };

  export type ScriptInfoStructOutput = [
    depositInfo: [string, string, string, string, string],
    userEphemeralL2Address: string,
    scriptTimeout: bigint
  ] & {
    depositInfo: [string, string, string, string, string];
    userEphemeralL2Address: string;
    scriptTimeout: bigint;
  };

  export type TradeDataStruct = {
    sessionId: BigNumberish;
    tradeInfo: ITypes.TradeInfoStruct;
    scriptInfo: ITypes.ScriptInfoStruct;
  };

  export type TradeDataStructOutput = [
    sessionId: bigint,
    tradeInfo: ITypes.TradeInfoStructOutput,
    scriptInfo: ITypes.ScriptInfoStructOutput
  ] & {
    sessionId: bigint;
    tradeInfo: ITypes.TradeInfoStructOutput;
    scriptInfo: ITypes.ScriptInfoStructOutput;
  };
}

export interface RouterInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "SIGNER"
      | "confirmDeposit"
      | "confirmPayment"
      | "confirmSettlement"
      | "getCurrentStage"
      | "getDepositAddressList"
      | "getPMMSelection"
      | "getPresigns"
      | "getProtocolFee"
      | "getSettledPayment"
      | "getTradeData"
      | "makePayment"
      | "management"
      | "routes"
      | "selectPMM"
      | "setManagement"
      | "setRoute"
      | "submitTradeInfoAndPresign"
      | "tradeIdToCore"
      | "version"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "ConfirmDeposit"
      | "ConfirmPayment"
      | "ConfirmSettlement"
      | "MakePayment"
      | "SelectPMM"
      | "SubmitTradeInfo"
      | "UpdatedRoute"
  ): EventFragment;

  encodeFunctionData(functionFragment: "SIGNER", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "confirmDeposit",
    values: [BytesLike, BytesLike, BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "confirmPayment",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "confirmSettlement",
    values: [BytesLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentStage",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getDepositAddressList",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getPMMSelection",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getPresigns",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getProtocolFee",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getSettledPayment",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getTradeData",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "makePayment",
    values: [BytesLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "management",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "routes", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "selectPMM",
    values: [BytesLike, ITypes.PMMSelectionStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "setManagement",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setRoute",
    values: [AddressLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "submitTradeInfoAndPresign",
    values: [BytesLike, ITypes.TradeDataStruct, ITypes.PresignStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "tradeIdToCore",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "version",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(functionFragment: "SIGNER", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "confirmDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "confirmPayment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "confirmSettlement",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentStage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDepositAddressList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPMMSelection",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPresigns",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProtocolFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSettledPayment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTradeData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "makePayment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "management", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "routes", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "selectPMM", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setManagement",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setRoute", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "submitTradeInfoAndPresign",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tradeIdToCore",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;
}

export namespace ConfirmDepositEvent {
  export type InputTuple = [
    mpc: AddressLike,
    tradeId: BytesLike,
    pFeeRate: BigNumberish,
    list: BytesLike[]
  ];
  export type OutputTuple = [
    mpc: string,
    tradeId: string,
    pFeeRate: bigint,
    list: string[]
  ];
  export interface OutputObject {
    mpc: string;
    tradeId: string;
    pFeeRate: bigint;
    list: string[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ConfirmPaymentEvent {
  export type InputTuple = [mpc: AddressLike, tradeId: BytesLike];
  export type OutputTuple = [mpc: string, tradeId: string];
  export interface OutputObject {
    mpc: string;
    tradeId: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ConfirmSettlementEvent {
  export type InputTuple = [mpc: AddressLike, tradeId: BytesLike];
  export type OutputTuple = [mpc: string, tradeId: string];
  export interface OutputObject {
    mpc: string;
    tradeId: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MakePaymentEvent {
  export type InputTuple = [solver: AddressLike, tradeId: BytesLike];
  export type OutputTuple = [solver: string, tradeId: string];
  export interface OutputObject {
    solver: string;
    tradeId: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SelectPMMEvent {
  export type InputTuple = [solver: AddressLike, tradeId: BytesLike];
  export type OutputTuple = [solver: string, tradeId: string];
  export interface OutputObject {
    solver: string;
    tradeId: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SubmitTradeInfoEvent {
  export type InputTuple = [solver: AddressLike, tradeId: BytesLike];
  export type OutputTuple = [solver: string, tradeId: string];
  export interface OutputObject {
    solver: string;
    tradeId: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpdatedRouteEvent {
  export type InputTuple = [
    core: AddressLike,
    version: BigNumberish,
    fromChain: BytesLike,
    toChain: BytesLike
  ];
  export type OutputTuple = [
    core: string,
    version: bigint,
    fromChain: string,
    toChain: string
  ];
  export interface OutputObject {
    core: string;
    version: bigint;
    fromChain: string;
    toChain: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Router extends BaseContract {
  connect(runner?: ContractRunner | null): Router;
  waitForDeployment(): Promise<this>;

  interface: RouterInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  SIGNER: TypedContractMethod<[], [string], "view">;

  confirmDeposit: TypedContractMethod<
    [tradeId: BytesLike, signature: BytesLike, depositFromList: BytesLike[]],
    [void],
    "nonpayable"
  >;

  confirmPayment: TypedContractMethod<
    [tradeId: BytesLike, signature: BytesLike],
    [void],
    "nonpayable"
  >;

  confirmSettlement: TypedContractMethod<
    [tradeId: BytesLike, releaseTxId: BytesLike, signature: BytesLike],
    [void],
    "nonpayable"
  >;

  getCurrentStage: TypedContractMethod<[tradeId: BytesLike], [bigint], "view">;

  getDepositAddressList: TypedContractMethod<
    [tradeId: BytesLike],
    [string[]],
    "view"
  >;

  getPMMSelection: TypedContractMethod<
    [tradeId: BytesLike],
    [ITypes.PMMSelectionStructOutput],
    "view"
  >;

  getPresigns: TypedContractMethod<
    [tradeId: BytesLike],
    [ITypes.PresignStructOutput[]],
    "view"
  >;

  getProtocolFee: TypedContractMethod<
    [tradeId: BytesLike],
    [ITypes.ProtocolFeeStructOutput],
    "view"
  >;

  getSettledPayment: TypedContractMethod<
    [tradeId: BytesLike],
    [ITypes.SettledPaymentStructOutput],
    "view"
  >;

  getTradeData: TypedContractMethod<
    [tradeId: BytesLike],
    [ITypes.TradeDataStructOutput],
    "view"
  >;

  makePayment: TypedContractMethod<
    [tradeId: BytesLike, txId: BytesLike, signature: BytesLike],
    [void],
    "nonpayable"
  >;

  management: TypedContractMethod<[], [string], "view">;

  routes: TypedContractMethod<[arg0: BytesLike], [string], "view">;

  selectPMM: TypedContractMethod<
    [tradeId: BytesLike, info: ITypes.PMMSelectionStruct],
    [void],
    "nonpayable"
  >;

  setManagement: TypedContractMethod<
    [newManagement: AddressLike],
    [void],
    "nonpayable"
  >;

  setRoute: TypedContractMethod<
    [core: AddressLike, fromChain: BytesLike, toChain: BytesLike],
    [void],
    "nonpayable"
  >;

  submitTradeInfoAndPresign: TypedContractMethod<
    [
      tradeId: BytesLike,
      data: ITypes.TradeDataStruct,
      presigns: ITypes.PresignStruct[]
    ],
    [void],
    "nonpayable"
  >;

  tradeIdToCore: TypedContractMethod<[arg0: BytesLike], [string], "view">;

  version: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "SIGNER"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "confirmDeposit"
  ): TypedContractMethod<
    [tradeId: BytesLike, signature: BytesLike, depositFromList: BytesLike[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "confirmPayment"
  ): TypedContractMethod<
    [tradeId: BytesLike, signature: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "confirmSettlement"
  ): TypedContractMethod<
    [tradeId: BytesLike, releaseTxId: BytesLike, signature: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getCurrentStage"
  ): TypedContractMethod<[tradeId: BytesLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getDepositAddressList"
  ): TypedContractMethod<[tradeId: BytesLike], [string[]], "view">;
  getFunction(
    nameOrSignature: "getPMMSelection"
  ): TypedContractMethod<
    [tradeId: BytesLike],
    [ITypes.PMMSelectionStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getPresigns"
  ): TypedContractMethod<
    [tradeId: BytesLike],
    [ITypes.PresignStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getProtocolFee"
  ): TypedContractMethod<
    [tradeId: BytesLike],
    [ITypes.ProtocolFeeStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getSettledPayment"
  ): TypedContractMethod<
    [tradeId: BytesLike],
    [ITypes.SettledPaymentStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getTradeData"
  ): TypedContractMethod<
    [tradeId: BytesLike],
    [ITypes.TradeDataStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "makePayment"
  ): TypedContractMethod<
    [tradeId: BytesLike, txId: BytesLike, signature: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "management"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "routes"
  ): TypedContractMethod<[arg0: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "selectPMM"
  ): TypedContractMethod<
    [tradeId: BytesLike, info: ITypes.PMMSelectionStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setManagement"
  ): TypedContractMethod<[newManagement: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setRoute"
  ): TypedContractMethod<
    [core: AddressLike, fromChain: BytesLike, toChain: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "submitTradeInfoAndPresign"
  ): TypedContractMethod<
    [
      tradeId: BytesLike,
      data: ITypes.TradeDataStruct,
      presigns: ITypes.PresignStruct[]
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "tradeIdToCore"
  ): TypedContractMethod<[arg0: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "version"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  getEvent(
    key: "ConfirmDeposit"
  ): TypedContractEvent<
    ConfirmDepositEvent.InputTuple,
    ConfirmDepositEvent.OutputTuple,
    ConfirmDepositEvent.OutputObject
  >;
  getEvent(
    key: "ConfirmPayment"
  ): TypedContractEvent<
    ConfirmPaymentEvent.InputTuple,
    ConfirmPaymentEvent.OutputTuple,
    ConfirmPaymentEvent.OutputObject
  >;
  getEvent(
    key: "ConfirmSettlement"
  ): TypedContractEvent<
    ConfirmSettlementEvent.InputTuple,
    ConfirmSettlementEvent.OutputTuple,
    ConfirmSettlementEvent.OutputObject
  >;
  getEvent(
    key: "MakePayment"
  ): TypedContractEvent<
    MakePaymentEvent.InputTuple,
    MakePaymentEvent.OutputTuple,
    MakePaymentEvent.OutputObject
  >;
  getEvent(
    key: "SelectPMM"
  ): TypedContractEvent<
    SelectPMMEvent.InputTuple,
    SelectPMMEvent.OutputTuple,
    SelectPMMEvent.OutputObject
  >;
  getEvent(
    key: "SubmitTradeInfo"
  ): TypedContractEvent<
    SubmitTradeInfoEvent.InputTuple,
    SubmitTradeInfoEvent.OutputTuple,
    SubmitTradeInfoEvent.OutputObject
  >;
  getEvent(
    key: "UpdatedRoute"
  ): TypedContractEvent<
    UpdatedRouteEvent.InputTuple,
    UpdatedRouteEvent.OutputTuple,
    UpdatedRouteEvent.OutputObject
  >;

  filters: {
    "ConfirmDeposit(address,bytes32,uint256,bytes[])": TypedContractEvent<
      ConfirmDepositEvent.InputTuple,
      ConfirmDepositEvent.OutputTuple,
      ConfirmDepositEvent.OutputObject
    >;
    ConfirmDeposit: TypedContractEvent<
      ConfirmDepositEvent.InputTuple,
      ConfirmDepositEvent.OutputTuple,
      ConfirmDepositEvent.OutputObject
    >;

    "ConfirmPayment(address,bytes32)": TypedContractEvent<
      ConfirmPaymentEvent.InputTuple,
      ConfirmPaymentEvent.OutputTuple,
      ConfirmPaymentEvent.OutputObject
    >;
    ConfirmPayment: TypedContractEvent<
      ConfirmPaymentEvent.InputTuple,
      ConfirmPaymentEvent.OutputTuple,
      ConfirmPaymentEvent.OutputObject
    >;

    "ConfirmSettlement(address,bytes32)": TypedContractEvent<
      ConfirmSettlementEvent.InputTuple,
      ConfirmSettlementEvent.OutputTuple,
      ConfirmSettlementEvent.OutputObject
    >;
    ConfirmSettlement: TypedContractEvent<
      ConfirmSettlementEvent.InputTuple,
      ConfirmSettlementEvent.OutputTuple,
      ConfirmSettlementEvent.OutputObject
    >;

    "MakePayment(address,bytes32)": TypedContractEvent<
      MakePaymentEvent.InputTuple,
      MakePaymentEvent.OutputTuple,
      MakePaymentEvent.OutputObject
    >;
    MakePayment: TypedContractEvent<
      MakePaymentEvent.InputTuple,
      MakePaymentEvent.OutputTuple,
      MakePaymentEvent.OutputObject
    >;

    "SelectPMM(address,bytes32)": TypedContractEvent<
      SelectPMMEvent.InputTuple,
      SelectPMMEvent.OutputTuple,
      SelectPMMEvent.OutputObject
    >;
    SelectPMM: TypedContractEvent<
      SelectPMMEvent.InputTuple,
      SelectPMMEvent.OutputTuple,
      SelectPMMEvent.OutputObject
    >;

    "SubmitTradeInfo(address,bytes32)": TypedContractEvent<
      SubmitTradeInfoEvent.InputTuple,
      SubmitTradeInfoEvent.OutputTuple,
      SubmitTradeInfoEvent.OutputObject
    >;
    SubmitTradeInfo: TypedContractEvent<
      SubmitTradeInfoEvent.InputTuple,
      SubmitTradeInfoEvent.OutputTuple,
      SubmitTradeInfoEvent.OutputObject
    >;

    "UpdatedRoute(address,uint256,bytes,bytes)": TypedContractEvent<
      UpdatedRouteEvent.InputTuple,
      UpdatedRouteEvent.OutputTuple,
      UpdatedRouteEvent.OutputObject
    >;
    UpdatedRoute: TypedContractEvent<
      UpdatedRouteEvent.InputTuple,
      UpdatedRouteEvent.OutputTuple,
      UpdatedRouteEvent.OutputObject
    >;
  };
}
